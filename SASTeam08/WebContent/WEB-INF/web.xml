<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">
  <display-name>SASTeam08</display-name>
  
	<!-- The Welcome File List -->
	<welcome-file-list>
		<welcome-file>/redirect.jsp</welcome-file>
	</welcome-file-list>

	<!-- Define the type of login, and what page is called when credentials are challenged-->
	<login-config>
		<auth-method>FORM</auth-method>
		<realm-name>AuthenticatedRealm</realm-name>
		<form-login-config>
			<form-login-page>/login.jsp</form-login-page>
			<!-- "Error" usually means that the password doesn't match -->
			<form-error-page>/login.jsp?loginError=true</form-error-page>
		</form-login-config>
	</login-config>
	
	<!-- 400 means authorization error -->
	<error-page>
		<error-code>400</error-code>
		<location>/errors/badredirect.jsp</location>
	</error-page>

	<!-- 403 means authorization error -->
	<error-page>
		<error-code>403</error-code>
		<location>/errors/noaccess.jsp</location>
	</error-page>

	<!-- 503 means "service unavailable", we'll use it when the DB can't be accessed -->
	<error-page>
		<error-code>503</error-code>
		<location>/errors/nodb.jsp</location>
	</error-page>
	
	<!-- Define all of the roles here -->
	<security-role>
		<role-name>user</role-name>
	</security-role>
	<security-role>
		<role-name>admin</role-name>
	</security-role>
	
	<security-constraint>
		<display-name>Authenticated Users</display-name>
		<web-resource-collection>
			<web-resource-name>
				All Authenticated Users
			</web-resource-name>
			<!-- Define the context-relative URL(s) to be protected -->
			<url-pattern>/auth/*</url-pattern>
		</web-resource-collection>
		<auth-constraint>
			<!-- Anyone with one of the listed roles may access this area -->
			<role-name>admin</role-name>
			<role-name>user</role-name>
		</auth-constraint>
	</security-constraint>
	
  <context-param>
    <description>Location to store uploaded file</description>
    <param-name>file-upload</param-name>
    <param-value>uploads</param-value>
  </context-param>
  <servlet>
    <description></description>
    <display-name>DBGetter</display-name>
    <servlet-name>DBGetter</servlet-name>
    <servlet-class>com.ajax.DBGetter</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>DBGetter</servlet-name>
    <url-pattern>/DBGetter</url-pattern>
  </servlet-mapping>
  <servlet>
    <description></description>
    <display-name>FileUploadServlet</display-name>
    <servlet-name>FileUploadServlet</servlet-name>
    <servlet-class>com.ajax.FileUploadServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>FileUploadServlet</servlet-name>
    <url-pattern>/FileUploadServlet</url-pattern>
  </servlet-mapping>
  <servlet>
    <description></description>
    <display-name>DeleteFileServlet</display-name>
    <servlet-name>DeleteFileServlet</servlet-name>
    <servlet-class>com.ajax.DeleteFileServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>DeleteFileServlet</servlet-name>
    <url-pattern>/DeleteFileServlet</url-pattern>
  </servlet-mapping>
</web-app>